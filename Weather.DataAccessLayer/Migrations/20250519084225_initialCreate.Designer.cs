// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Weather.DataAccessLayer;

#nullable disable

namespace Weather.DataAccessLayer.Migrations
{
    [DbContext(typeof(WeatherDbContext))]
    [Migration("20250519084225_initialCreate")]
    partial class initialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("Weather.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Admin1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Admin1_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Admin2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Admin2_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Admin3")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Admin3_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country_code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Country_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Elevation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Feature_code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Population")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("Postcodes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Weather.Domain.Entities.Daily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("rain_sum")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("temperature_2m_max")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("temperature_2m_min")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("weatherId")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("weather_code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("wind_speed_10m_max")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("weatherId")
                        .IsUnique();

                    b.ToTable("DailyData");
                });

            modelBuilder.Entity("Weather.Domain.Entities.DailyUnits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("rain_sum")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("temperature_2m_max")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("temperature_2m_min")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("weatherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("weather_code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("wind_speed_10m_max")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("weatherId")
                        .IsUnique();

                    b.ToTable("DailyUnits");
                });

            modelBuilder.Entity("Weather.Domain.Entities.Hourly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("rain")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("temperature_180m")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("weatherId")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("weather_code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("wind_speed_180m")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("weatherId")
                        .IsUnique();

                    b.ToTable("HourlyData");
                });

            modelBuilder.Entity("Weather.Domain.Entities.HourlyUnits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("rain")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("temperature_180m")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("weatherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("weather_code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("wind_speed_180m")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("weatherId")
                        .IsUnique();

                    b.ToTable("HourlyUnits");
                });

            modelBuilder.Entity("Weather.Domain.Entities.WeatherData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("elevation")
                        .HasColumnType("REAL");

                    b.Property<double>("generationtime_ms")
                        .HasColumnType("REAL");

                    b.Property<double>("latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("timezone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("timezone_abbreviation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("utc_offset_seconds")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WeatherData");
                });

            modelBuilder.Entity("Weather.Domain.Entities.Daily", b =>
                {
                    b.HasOne("Weather.Domain.Entities.WeatherData", "WeatherData")
                        .WithOne("daily")
                        .HasForeignKey("Weather.Domain.Entities.Daily", "weatherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherData");
                });

            modelBuilder.Entity("Weather.Domain.Entities.DailyUnits", b =>
                {
                    b.HasOne("Weather.Domain.Entities.WeatherData", "WeatherData")
                        .WithOne("daily_units")
                        .HasForeignKey("Weather.Domain.Entities.DailyUnits", "weatherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherData");
                });

            modelBuilder.Entity("Weather.Domain.Entities.Hourly", b =>
                {
                    b.HasOne("Weather.Domain.Entities.WeatherData", "WeatherData")
                        .WithOne("hourly")
                        .HasForeignKey("Weather.Domain.Entities.Hourly", "weatherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherData");
                });

            modelBuilder.Entity("Weather.Domain.Entities.HourlyUnits", b =>
                {
                    b.HasOne("Weather.Domain.Entities.WeatherData", "WeatherData")
                        .WithOne("hourly_units")
                        .HasForeignKey("Weather.Domain.Entities.HourlyUnits", "weatherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherData");
                });

            modelBuilder.Entity("Weather.Domain.Entities.WeatherData", b =>
                {
                    b.Navigation("daily");

                    b.Navigation("daily_units");

                    b.Navigation("hourly");

                    b.Navigation("hourly_units");
                });
#pragma warning restore 612, 618
        }
    }
}
